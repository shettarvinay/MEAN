{
  "name": "prototypes",
  "version": "1.4.0",
  "description": "Some common prototypes for node.js: string.startsWith(), object.countProperties() and more. Facilities for functional programming with objects: object.forEach(), object.filter(). Functions are added safely using Object.defineProperty().",
  "homepage": "https://github.com/alexfernandez/prototypes",
  "contributors": [
    {
      "name": "Alex Fernández",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "index.js",
  "files": [
    "index.js",
    "lib"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/alexfernandez/prototypes"
  },
  "dependencies": {},
  "devDependencies": {
    "testing": "*"
  },
  "keywords": [
    "prototypes",
    "prototype",
    "string",
    "object",
    "functional programming",
    "functional"
  ],
  "engines": {
    "node": "*"
  },
  "preferGlobal": false,
  "scripts": {
    "test": "node runTests.js"
  },
  "private": false,
  "readme": "[![Build Status](https://secure.travis-ci.org/alexfernandez/prototypes.png)](http://travis-ci.org/alexfernandez/prototypes)\n\n[![Package quality](http://packagequality.com/badge/prototypes.png)](http://packagequality.com/#?package=prototypes)\n\n# prototypes\n\nSome common prototypes for node.js: `string.startsWith()`,\n`object.countProperties()` and more.\nFunctions are added using `Object.defineProperty()` to avoid polluting new objects.\n\nIncludes nice facilities for functional programming with objects:\n`object.forEach()`, `object.filterIn()` and so on.\n\n## Installation\n\nSimply install using npm:\n\n    npm install prototypes\n\nOr add to the dependencies of your project in your `package.json`.\n\n## Usage\n\nThis package adds some useful prototypes to `String`, `Object` and `Array`.\nTo use in your package, you just have to require prototypes:\n\n```js\nrequire('prototypes');\n```\n\nThere is no need to assign the result to any variable, since the prototypes\nare added automatically. It may in fact result in a warning in JSHint\nor similar code checkers.\n\nSpecial care has been taken to avoid nasty interactions with other libraries:\nthe new function prototypes don't appear in enumerations and can be overwritten\nin your own code.\n\n## String Prototypes\n\nThe following string prototypes are provided.\n\n### string.startsWith(str)\n\nCheck that the current string starts with the given substring. Example:\n\n```js\n'pepitus'.startsWith('pep');\n//=> true\n```\n\n### string.endsWith(str)\n\nCheck that the current string ends with the given substring. Example:\n\n ```js\n'pepitus'.endsWith('tus');\n//=> true\n```\n\n### string.substringUpTo(str)\n\nReturn the piece of string until the argument is found;\nreturn the whole string if not found.\nExample:\n\n```js\n'hi.there'.substringUpTo('.');\n//=> 'hi'\n```\n\n### string.substringUpToLast(str)\n\nReturn the piece of string until the last occurrence of the argument;\nreturn the whole string if not found.\nExample:\n\n```js\n'hi.there.you'.substringUpToLast('.');\n//=> 'hi.there'\n```\n\n### string.substringFrom(str)\n\nReturn the piece of string starting with the argument; empty string if not found.\nExample:\n\n```js\n'hi.there'.substringFrom('.');\n//=> 'there'\n```\n\n### string.substringFromLast(str)\n\nReturn the piece from the last occurrence of the argument; empty string if not found.\nExample:\n\n```js\n'hi.there.you'.substringFromLast('.');\n//=> 'you'\n```\n\n### string.contains(str)\n\nFind out if the string contains the argument at any position. Case-sensitive.\nExample:\n\n```js\n'abcde'.contains('bcd');\n//=> true\n```\n\n### string.containsIgnoreCase(str)\n\nFind out if the string contains the argument at any position,\ncase-insensitive.\nExample:\n\n```js\n'aBcDe'.containsIgnoreCase('bCd');\n//=> true\n```\n\n### string.replaceAll(str, replacement)\n\nReplace all occurrences of a string with the replacement.\nExample:\n\n```js\n'pepitus'.replaceAll('p', 'c');\n//=> 'cecitus'\n```\n\n### string.replaceIgnoreCase(str, replacement)\n\nReplace the first occurrence of a string ignoring case with the replacement.\nExample:\n\n```js\n'Pepitus'.replaceAll('p', 'c');\n//=> 'cecitus'\n```\n\n### string.replaceAllIgnoreCase(str, replacement)\n\nReplace all occurrences of a string with the replacement,\nignoring case.\nExample:\n\n```js\n'Pepitus'.replaceAll('p', 'cor');\n//=> 'corecoritus'\n```\n\n### string.repeat(number)\n\nRepeat the given string a few times.\nExample:\n\n```js\n'ab'.repeat(3);\n//=> 'ababab'\n```\n\n### string.capitalize()\n\nCapitalize a string: first letter upper case, rest as is.\nExample:\n\n```js\n'hello'.capitalize();\n//=> 'Hello'\n```\n\n### string.format()\n\nFormat a string using the same convention as `util.format()`:\n`%s` represents a string value, `%j` converts to JSON, and so on.\nExample:\n\n```js\n'Hi %s, %j'.format('a', {});\n//=> 'Hi a, {}'\n```\n\n### string.escapeForWeb()\n\nWeb safe escape. Escapes everything that escape does and the plus sign.\nExample:\n\n```\n'Hi, my name is Pepíto'.escapeForWeb();\n  \\=> 'Hi%2C%20my%20name%20is%20Pep%EDto'\n```\n\n### string.unescapeForWeb()\n\nUnescapes everything that unescape does plus \"+\",\nand can also be applied on the result more than once without generating `URIError:\nURI malformed` as `decodeURIComponent()` does.\nExample:\n\n```\n'Hi%2C%20my%20name%20is%20Pep%EDto'.unescapeForWeb();\n  \\=> 'Hi, my name is Pepíto'\n```\n\n### string.hashCode()\n\nImplement a hash code prototype for a string.\nBased on [Manwe's function](http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/).\nExample:\n\n```\n'Hi, my name is Pepíto'.hashCode();\n  \\=> 1239770349\n```\n\n## Object Prototypes\n\nFor objects some care must be taken before overwriting `Object.prototype`:\notherwise it might break all code that does not check for hasOwnProperty().\nSee [MDN help](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty).\nIn this library all extensions are done using `Object.defineProperty()`\nwhich does not pollute objects as the new properties are not enumerable.\nAgain, see [MDN help](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty).\n\n### object.countProperties(filter)\n\nCount the number of properties in an object.\nDoes not count inherited properties: uses Object.keys().\nExample:\n\n```js\n{a: 'a'}.countProperties();\n//=> 1\n```\n\nYou can also pass a string or a function as a filter:\n\n```js\n{hello: 'a'}.countProperties('ll');\n//=> 1\n\n{hello: 'a'}.countProperties(function(key) { return key.length == 5 });\n//=> 1\n```\n\n### object.overwriteWith(overwriter)\n\nOverwrite properties in the original with the given object.\nExample:\n\n```js\n{a: 'a'}.overwriteWith({b: 'b'});\n//=> {a: 'a', b: 'b'}\n```\n\n*Note*: properties which are `undefined` are not overwritten;\nall others (including `null`) are. For instance:\n\n```js\n{a: 'a'}.overwriteWith({b: undefined, c: null});\n//=> {a: 'a', c: null}\n```\n\n### object.concat(otherObject)\n\nReturn a new object that includes properties of the object\nand the other object. Does not modify the original object.\nExample:\n\n```js\n{a: 'a'}.concat({b: 'b'});\n//=> {a: 'a', b: 'b'}\n```\n\n### object.forEach(callback)\n\nCall the callback for every value of the object.\nSimilar to `array.forEach()`, the callback will receive three parameters:\nvalue, key and the object itself.\nExample:\n\n```js\n{a: 1, b: 2}.forEach(function(value, key) {\n  console.log(key + ': ' + value);\n});\n//=> a: 1\n//=> b: 2\n```\n\n### object.filterIn(callback)\n\nReturn a new object that only includes those properties of the object\nthat return `true` for the given callback, i.e.:\n`callback(value) == true`.\nDoes not modify the original object.\nWorks also on arrays, equivalent to `array.filter()`.\nExample:\n\n```js\n{a: 1, b: 2}.filterIn(function(value) {\n  return value > 1;\n});\n//=> {b: 2}\n```\n\n### object.filterOut(callback)\n\nReturn a new object that only includes those properties of the object\nthat return `false` for the given callback, i.e.:\n`callback(value) != true`.\nDoes not modify the original object.\nWorks also on arrays.\nExample:\n\n```js\n{a: 1, b: 2}.filterOut(function(value) {\n    return value > 1;\n});\n//=> {a: 1}\n```\n\n### object.renameProperties(mappingObject)\n\nRename an object's properties based on another 'mapping' object's key/value pairs.\nExample:\n\n```js\n{a: 1, b: 2}.renameProperties({a: 'z', b: 'y'});\n//=> {z: 1, y: 2}\n```\n\n## Object Functions\n\nFunctions added to `Object` are available to operate on parameter objects.\n\n### Object.values(object)\n\nGet an array with all values in the object. Example:\n\n ```js\nObject.values({first: 'a', second: 'b'});\n//=> ['a', 'b']\n```\n\n## Array Prototypes\n\nThe following array prototypes are provided.\n\n### array.contains(element)\n\nCheck if the array contains the given element. Example:\n\n```js\n['a', 'b'].contains('a');\n//=> true\n```\n\n### array.remove(element)\n\nRemove the element from the array if present, and return it.\nIf not present, returns null. Example:\n\n```js\nvar array = ['a', 'b'];\narray.remove('a');\n//=> 'a'\n\narray\n//=> ['b']\n```\n\n### array.filterIn(checker)\n\nInherited from `object.filterIn(checker)`, works also on arrays.\nIdentical to `array.filter(checker)`.\n\n### array.filterOut(checker)\n\nInherited from `object.filterIn(checker)`, works also on arrays.\nSimilar to `array.filter()` but reversed. Example:\n\n```js\n['a', 'b', 'c1', 'c2'].filterOut(function(element) {\n  return element.startsWith('c');\n});\n//=> ['a', 'b']\n```\n\n### array.unique()\n\nReturns a new array of unique elements.\nThrows out null and undefined elements. Example:\n\n```js\n['c', 'a', 'b', 'c', 'b'].unique();\n//=> ['c', 'a', 'b']\n```\n\n*Note*: Up to versions 1.1.x `array.unique()` returned a *sorted* array.\nHowever, nothing in the function name suggested this to be the case,\nwhich could (and did) lead to confusion.\nAs of 1.2.0, that is no longer the case: `array.unique()` returns elements\nin the same order as the original array.\n\n### array.first()\n\nReturns the first element of an array, or undefined\nfor an empty array. Example:\n\n```js\n['a', 'b', 'c'].first();\n//=> 'a'\n```\n\n### array.last()\n\nReturns the last element of an array, or undefined\nfor an empty array. Example:\n\n```js\n['a', 'b', 'c'].last();\n//=> 'c'\n```\n\n### array.concatAll()\n\nFlattens just one level of nested array. Example:\n\n```js\n[1, 2, [3, 4, [5, 6]]].concatAll();\n//=> [1, 2, 3, 4, [5, 6]]\n```\n\n### array.flatten()\n\nFlattens all levels of nested arrays. Example:\n\n```js\n[1, 2, [3, 4, [5, 6]]].concatAll();\n//=> [1, 2, 3, 4, 5, 6]\n```\n\n### Array.toArray(object)\n\nReturn an array with the object property values. If already an array,\nreturns the unmodified array.\nExample:\n\n```js\nArray.toArray({a: 1, b: 2});\n//=> [1, 2]\n```\n\n*Note*: this function resides in the `Array` global like `Array.isArray()`,\ninstead of in individual arrays as the previous functions.\nIn versions up to 0.3.4 there were functions `object.toArray()` and `object.isArray()`,\nbut they were removed due to\n[incompatibilities](https://github.com/alexfernandez/prototypes/issues/8) with lodash.\n\n## Math-related Functions\n\nThere are math functions in `Math`, in `Number.prototype`, exported `isNumber`\nand even as globals, e.g. `parseInt()`.\n\n### parseInt(string)\n\nBy default parseInt() requires a radix (or base), or it will recreate the radix itself:\nif the string starts with a leading zero,\nthen it interprets that you are parsing an octal number.\n\n```js\n// unsafe parseInt()\nparseInt('010');\n//=> 8\n```\n\nThis library replaces the global function with a safe version that uses radix 10\nunless told otherwise.\nThe last person that wanted to convert octal with leading zeroes\nis probably programming in C anyway.\nExample:\n\n ```js\nparseInt('010');\n//=> 10\n```\n\n### isNumber(value)\n\nThe function isNumber() is based on\n[this StackOverflow answer](http://stackoverflow.com/a/1830844/978796):\nit checks if the parameter is a number.\nExamples:\n\n```js\nvar prototypes = require('prototypes');\n\nprototypes.isNumber(5);\n//=> true\n\nprototypes.isNumber('hi');\n//=> false\n```\n\n### Math.log10(number)\n\nLogarithm in base 10. Example:\n\n```js\nMath.log10(10);\n//=> 1\n```\n\n### number.toRad()\n\nConvert a number in degrees to radians. Example:\n\n```js\nvar n = 180;\n\nn.toRad();\n//=> 3.141592653589793\n```\n\n## RegExp Prototypes\n\nPrototypes used to enhance regular expressions (the RegExp prototype). Can also be used with the syntax\n`/.../.`\n\n### makeGlobal()\n\nReturns a new regular expression which is always global.\nExample:\n\n```js\n'pepitus'.replace(/p/.makeGlobal(), 'c');\n//=> 'cecitus'\n```\n\n## Acknowledgements\n\nThanks to my current employer [MediaSmart Mobile](http://www.mediasmart.es/) for their permission to reuse some of the prototypes we have cooked together.\n\nThanks to [William Wicks](https://github.com/williamwicks) for letting me\n(even encouraging me to) plunder his [extensions](https://github.com/williamwicks/extensions) library.\n\n### License\n\nThis package is published under the MIT license.\nYou can integrate it in any commercial, closed software and/or make changes to the code with complete liberty.\nIf you send your changes back to the main repo we will be grateful,\nbut it is by no means required.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexfernandez/prototypes/issues"
  },
  "_id": "prototypes@1.4.0",
  "dist": {
    "shasum": "c26b8cece3184d9b4f2d20a4e52db629a8ff3398"
  },
  "_from": "prototypes@>= 0.4.3",
  "_resolved": "https://registry.npmjs.org/prototypes/-/prototypes-1.4.0.tgz"
}
